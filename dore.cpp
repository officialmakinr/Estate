
// Copyright (c) 2010-2023 niXman (github dot nixman at pm dot me). All
// rights reserved.
//
// This file is part of YAS(https://github.com/niXman/yas) project.
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include <yas/serialize.hpp>
#include <yas/types/utility/array.hpp>

#undef NDEBUG
#include <cassert>

/***************************************************************************/

void json_test() {
    constexpr std::size_t flags = yas::mem|yas::json;

    int arr[3]{0,2,1};

    auto oobj = YAS_OBJECT_NVP(nullptr, ("array", yas::array(arr, sizeof(arr)/sizeof(arr[0]))));
    auto buf = yas::save<flags>(oobj);

    static const char expected[] = "{\"array\":{\"size\":3,\"data\":[0,2,1]}}";
    assert(buf.size == sizeof(expected)-1);
    assert(std::memcmp(buf.data.get(), expected, buf.size) == 0);

    int *iptr = nullptr;
    std::size_t isize = 0;

    auto arrholder = yas::array(&iptr, &isize);
    auto iobj = YAS_OBJECT_NVP(nullptr, ("array", arrholder));
    yas::load<flags>(buf, iobj);

    assert(isize == 3);
    assert(iptr);
    assert(iptr[0] == 0 && iptr[1] == 2 && iptr[2] == 1);

    arrholder.free(iptr);
}

void json_compacted_test() {
    constexpr std::size_t flags = yas::mem|yas::json|yas::compacted;

    int arr[3]{0,2,1};

    auto oobj = YAS_OBJECT_NVP(nullptr, ("array", yas::array(arr, sizeof(arr)/sizeof(arr[0]))));
    auto buf = yas::save<flags>(oobj);

    static const char expected[] = "{\"array\":{\"size\":3,\"data\":[0,2,1]}}";
    assert(buf.size == sizeof(expected)-1);
    assert(std::memcmp(buf.data.get(), expected, buf.size) == 0);

    int *iptr = nullptr;
    std::size_t isize = 0;

    auto arrholder = yas::array(&iptr, &isize);
    auto iobj = YAS_OBJECT_NVP(nullptr, ("array", arrholder));
    yas::load<flags>(buf, iobj);

    assert(isize == 3);
    assert(iptr);
    assert(iptr[0] == 0 && iptr[1] == 2 && iptr[2] == 1);

    arrholder.free(iptr);
}

/***************************************************************************/

void text_test() {
    constexpr std::size_t flags = yas::mem|yas::text;

    int arr[3]{0,2,1};

    auto o = YAS_OBJECT_NVP(nullptr, ("array", yas::array(arr, sizeof(arr)/sizeof(arr[0]))));
    auto buf = yas::save<flags>(o);

    static const char expected[] = "yas002313101211";
    assert(buf.size == sizeof(expected)-1);
    assert(std::memcmp(buf.data.get(), expected, buf.size) == 0);

    int *iptr = nullptr;
    std::size_t isize = 0;

    auto arrholder = yas::array(&iptr, &isize);
    auto iobj = YAS_OBJECT_NVP(nullptr, ("array", arrholder));
    yas::load<flags>(buf, iobj);

    assert(isize == 3);
    assert(iptr);
    assert(iptr[0] == 0 && iptr[1] == 2 && iptr[2] == 1);

    arrholder.free(iptr);
}

/***************************************************************************/

void binary_test() {
    constexpr std::size_t flags = yas::mem|yas::binary;

    int arr[3]{0,2,1};

    auto o = YAS_OBJECT_NVP(nullptr, ("array", yas::array(arr, sizeof(arr)/sizeof(arr[0]))));
    auto buf = yas::save<flags>(o);

    static const char expected[] = {
         0x79, 0x61, 0x73, 0x30, 0x30, 0x31, 0x37, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00
        ,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
    };
    assert(buf.size == sizeof(expected));
    assert(std::memcmp(buf.data.get(), expected, buf.size) == 0);

    int *iptr = nullptr;
    std::size_t isize = 0;

    auto arrholder = yas::array(&iptr, &isize);
    auto iobj = YAS_OBJECT_NVP(nullptr, ("array", arrholder));
    yas::load<flags>(buf, iobj);

    assert(isize == 3);
    assert(iptr);
    assert(iptr[0] == 0 && iptr[1] == 2 && iptr[2] == 1);

    arrholder.free(iptr);
}

void binary_compacted_test() {
    constexpr std::size_t flags = yas::mem|yas::binary|yas::compacted;

    int arr[3]{0,2,1};

    auto o = YAS_OBJECT_NVP(nullptr, ("array", yas::array(arr, sizeof(arr)/sizeof(arr[0]))));
    auto buf = yas::save<flags>(o);

    static const unsigned char expected[] = {0x79, 0x61, 0x73, 0x30, 0x31, 0x31, 0x37, 0x83, 0x40, 0x42, 0x41};
    assert(buf.size == sizeof(expected));
    assert(std::memcmp(buf.data.get(), expected, buf.size) == 0);

    int *iptr = nullptr;
    std::size_t isize = 0;

    auto arrholder = yas::array(&iptr, &isize);
    auto iobj = YAS_OBJECT_NVP(nullptr, ("array", arrholder));
    yas::load<flags>(buf, iobj);

    assert(isize == 3);
    assert(iptr);
    assert(iptr[0] == 0 && iptr[1] == 2 && iptr[2] == 1);

    arrholder.free(iptr);
}

/***************************************************************************/

int main() {
    json_test();
    json_compacted_test();

    text_test();

    binary_test();
    binary_compacted_test();

    return EXIT_SUCCESS;
}

/***************************************************************************/
